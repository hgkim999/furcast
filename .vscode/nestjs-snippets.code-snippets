{
  // Place your furcast workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "NestJS Module": {
    "prefix": "nmodule",
    "body": [
      "import { Module } from '@nestjs/common';",
      "",
      "@Module({",
      "  imports: [],",
      "  controllers: [],",
      "  providers: [],",
      "  exports: [],",
      "})",
      "export class ${TM_FILENAME_BASE/(?:^|-|_|\\.)(\\w)/${1:/upcase}/g} {};",
      "",
    ],
  },
  "NestJS Resolver": {
    "prefix": "nresolver",
    "body": [
      "import { Resolver } from '@nestjs/graphql';",
      "",
      "import { ${TM_FILENAME_BASE/(.*)\\..+$/${1:/pascalcase}/g}Service } from './${TM_FILENAME_BASE/(.*)\\..+$/${1:/downcase}/g}.service';",
      "",
      "@Resolver()",
      "export class ${TM_FILENAME_BASE/(?:^|-|_|\\.)(\\w)/${1:/upcase}/g} {",
      "  constructor(private readonly ${TM_FILENAME_BASE/(.*)\\..+$/${1:/downcase}/g}Service: ${TM_FILENAME_BASE/(.*)\\..+$/${1:/pascalcase}/g}Service) {}",
      "",
      "  ${1}",
      "}",
      "",
    ],
  },
  "NestJS Service": {
    "prefix": "nservice",
    "body": [
      "import { Injectable } from '@nestjs/common';",
      "",
      "@Injectable()",
      "export class ${TM_FILENAME_BASE/(?:^|-|_|\\.)(\\w)/${1:/upcase}/g} {",
      "  constructor() {}",
      "",
      "  ${1}",
      "}",
      "",
    ],
  },
}
